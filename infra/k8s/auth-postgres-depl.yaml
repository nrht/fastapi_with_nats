apiVersion: v1
kind: ConfigMap
metadata:
  name: init-db-sql
data:
  init_table.sql: |
    CREATE TABLE IF NOT EXISTS roles (id SERIAL NOT NULL,role VARCHAR,PRIMARY KEY (id),UNIQUE (role));
    CREATE TABLE IF NOT EXISTS users (id SERIAL NOT NULL,email VARCHAR,name VARCHAR,password VARCHAR,registered_at TIMESTAMP WITHOUT TIME ZONE,role_id INTEGER,PRIMARY KEY (id),FOREIGN KEY(role_id) REFERENCES roles (id));
    INSERT INTO roles (id, role) VALUES (DEFAULT, 'administrator');
    INSERT INTO roles (id, role) VALUES (DEFAULT, 'director');
    INSERT INTO roles (id, role) VALUES (DEFAULT, 'manager');
    INSERT INTO roles (id, role) VALUES (DEFAULT, 'member');
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-postgres-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-postgres
  template:
    metadata:
      labels:
        app: auth-postgres
    spec:
      containers:
      - name: auth-postgres
        image: postgres:12.1-alpine
        ports:
          - containerPort: 5432
        env:
          - name: POSTGRES_DATABASE
            value: postgres
          - name: POSTGRES_PASSWORD
            value: postgres
          - name: POSTGRES_USER
            value: postgres
        volumeMounts:
        - name: init-sql-configmap
          mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-sql-configmap
          configMap:
            name: init-db-sql
---
apiVersion: v1
kind: Service
metadata:
  name: auth-postgres-srv
spec:
  selector:
    app: auth-postgres
  ports:
    - name: db
      protocol: TCP
      port: 5432
      targetPort: 5432